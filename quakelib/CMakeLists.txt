# Create a library called "quakelib" which includes the appropriate source files.

PROJECT (QuakeLib)
CMAKE_MINIMUM_REQUIRED (VERSION 2.6)

LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/)

# Set the version number
SET(QUAKELIB_VERSION_MAJOR 1)
SET(QUAKELIB_VERSION_MINOR 2)
SET(QUAKELIB_VERSION_SUBMINOR 0)
SET(QUAKELIB_VERSION_STR "${QUAKELIB_VERSION_MAJOR}.${QUAKELIB_VERSION_MINOR}.${QUAKELIB_VERSION_SUBMINOR}")

# Find a Git installation and the source Git revision if available
FIND_PACKAGE(Git)
IF(GIT_FOUND)
    INCLUDE(GetGitRevisionDescription)
    GET_GIT_HEAD_REVISION(QUAKELIB_GIT_REFSPEC QUAKELIB_GIT_SHA1)
ENDIF(GIT_FOUND)

# Enable testing framework
INCLUDE (CTest)

# If the user doesn't specify, build the release version by default
IF (NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Release)
ENDIF (NOT CMAKE_BUILD_TYPE)

# Check validity of different flags
INCLUDE(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG(-O0 COMPILER_SUPPORTS_OPT0_FLAG)
CHECK_CXX_COMPILER_FLAG(-O3 COMPILER_SUPPORTS_OPT3_FLAG)
CHECK_CXX_COMPILER_FLAG(-g COMPILER_SUPPORTS_DEBUG_FLAG)

 # Define debug vs release compiler flags
IF(COMPILER_SUPPORTS_OPT0_FLAG)
    SET(DEBUG_FLAGS "${DEBUG_FLAGS} -O0")
ENDIF(COMPILER_SUPPORTS_OPT0_FLAG)

IF(COMPILER_SUPPORTS_OPT3_FLAG)
    SET(RELEASE_FLAGS "${RELEASE_FLAGS} -O3")
    SET(RELWITHDEBINFO_FLAGS "${RELWITHDEBINFO_FLAGS} -O3")
ENDIF(COMPILER_SUPPORTS_OPT3_FLAG)

IF(COMPILER_SUPPORTS_DEBUG_FLAG)
    SET(DEBUG_FLAGS "${DEBUG_FLAGS} -g")
    SET(RELWITHDEBINFO_FLAGS "${RELWITHDEBINFO_FLAGS} -g")
ENDIF(COMPILER_SUPPORTS_DEBUG_FLAG)

SET(CMAKE_CXX_FLAGS)
SET(CMAKE_CXX_FLAGS_DEBUG ${DEBUG_FLAGS})
SET(CMAKE_CXX_FLAGS_RELEASE ${RELEASE_FLAGS})
SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO ${RELWITHDEBINFO_FLAGS})

# Check for common include files
INCLUDE (CheckIncludeFiles)
CHECK_INCLUDE_FILES ("float.h" QUAKELIB_HAVE_FLOAT_H)
CHECK_INCLUDE_FILES ("limits.h" QUAKELIB_HAVE_LIMITS_H)
CHECK_INCLUDE_FILES ("math.h" QUAKELIB_HAVE_MATH_H)
CHECK_INCLUDE_FILES ("stdlib.h" QUAKELIB_HAVE_STDLIB_H)
CHECK_INCLUDE_FILES ("string.h" QUAKELIB_HAVE_STRING_H)

# Check if Doxygen is installed
FIND_PACKAGE(Doxygen)

# Check for SWIG and Python installation
# TODO: add IF statements for INCLUDE paths
FIND_PACKAGE(SWIG)
IF(SWIG_FOUND)
    INCLUDE(${SWIG_USE_FILE})
ENDIF(SWIG_FOUND)

FIND_PACKAGE(PythonLibs)
IF(PYTHONLIBS_FOUND)
    INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
ENDIF(PYTHONLIBS_FOUND)

FIND_PACKAGE(PythonInterp)

# Check for MPI
FIND_PACKAGE(MPI)
IF(DEFINED MPI_C_FOUND AND MPI_CXX_FOUND)
    ADD_DEFINITIONS(${MPI_C_COMPILE_FLAGS})
    INCLUDE_DIRECTORIES(${MPI_C_INCLUDE_PATH})
ENDIF(DEFINED MPI_C_FOUND AND MPI_CXX_FOUND)

# Check for HDF5 and use it if available
FIND_PACKAGE(HDF5 COMPONENTS C HL)
IF(HDF5_FOUND)
    # If HDF5 requires parallel but MPI wasn't found, turn off HDF5
    IF(HDF5_IS_PARALLEL AND NOT MPI_C_FOUND)
        SET(HDF5_FOUND)
    ENDIF(HDF5_IS_PARALLEL AND NOT MPI_C_FOUND)
    INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIRS})
ENDIF(HDF5_FOUND)

# GeographicLib for lat/lon calculations
FIND_PACKAGE (GeographicLib 1.34)
IF (GEOGRAPHICLIB_FOUND)
    INCLUDE_DIRECTORIES (${GeographicLib_INCLUDE_DIRS})
    ADD_DEFINITIONS (${GeographicLib_DEFINITIONS})
ENDIF (GEOGRAPHICLIB_FOUND)

# Set up directory definitions
SET(QUAKELIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/)
SET(QUAKELIB_SOURCE_DIR ${QUAKELIB_DIR}/src/)
SET(QUAKELIB_PYTHON_DIR ${QUAKELIB_DIR}/python/)
SET(QUAKELIB_TEST_DIR ${QUAKELIB_DIR}/test/)
SET(QUAKELIB_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/)
INCLUDE_DIRECTORIES(${QUAKELIB_SOURCE_DIR})

# Generate the config.h file and add the include path for it
CONFIGURE_FILE(${QUAKELIB_DIR}/quakelib_config.h.in ${CMAKE_CURRENT_BINARY_DIR}/quakelib_config.h)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

SET(QUAKELIB_SOURCES
    ${QUAKELIB_SOURCE_DIR}/QuakeLibElement.cpp
    ${QUAKELIB_SOURCE_DIR}/QuakeLibEQSim.cpp
    ${QUAKELIB_SOURCE_DIR}/QuakeLibIO.cpp
    ${QUAKELIB_SOURCE_DIR}/QuakeLibOkada.cpp
    ${QUAKELIB_SOURCE_DIR}/QuakeLibUtil.cpp
    )

SET(QUAKELIB_HEADERS
    ${QUAKELIB_SOURCE_DIR}/QuakeLib.h
    ${QUAKELIB_SOURCE_DIR}/QuakeLibEQSim.h
    ${QUAKELIB_SOURCE_DIR}/QuakeLibIO.h
    ${QUAKELIB_SOURCE_DIR}/QuakeLibOkada.h
    ${QUAKELIB_SOURCE_DIR}/QuakeLibUtil.h
    ${CMAKE_CURRENT_BINARY_DIR}/quakelib_config.h
    )

# Build the QuakeLib library
ADD_LIBRARY (quakelib ${QUAKELIB_SOURCES} ${QUAKELIB_HEADERS})
SET_TARGET_PROPERTIES(quakelib PROPERTIES
    VERSION ${QUAKELIB_VERSION_STR}
    SOVERSION "${QUAKELIB_MAJOR_VERSION}")

IF (HDF5_FOUND)
    TARGET_LINK_LIBRARIES (quakelib ${HDF5_LIBRARIES} ${HDF5_HL_LIBRARIES})
ENDIF (HDF5_FOUND)

IF(MPI_C_FOUND)
    TARGET_LINK_LIBRARIES (quakelib ${MPI_C_LIBRARIES})
    TARGET_LINK_LIBRARIES (quakelib ${MPI_CXX_LIBRARIES})
    SET_TARGET_PROPERTIES(quakelib PROPERTIES COMPILE_FLAGS "${MPI_C_COMPILE_FLAGS} ${MPI_CXX_COMPILE_FLAGS}")
    SET_TARGET_PROPERTIES(quakelib PROPERTIES LINK_FLAGS "${MPI_C_LINK_FLAGS} ${MPI_CXX_LINK_FLAGS}")
ENDIF(MPI_C_FOUND)

IF (GEOGRAPHICLIB_FOUND)
    TARGET_LINK_LIBRARIES (quakelib ${GeographicLib_LIBRARIES})
ENDIF (GEOGRAPHICLIB_FOUND)

IF( CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )
  SET_TARGET_PROPERTIES(quakelib PROPERTIES COMPILE_FLAGS "-fPIC")
ENDIF( CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )

INSTALL(FILES ${QUAKELIB_HEADERS} DESTINATION include/quakelib/)

INSTALL(TARGETS quakelib
     RUNTIME DESTINATION bin/quakelib/ COMPONENT libraries
     LIBRARY DESTINATION lib/quakelib/ COMPONENT libraries
     ARCHIVE DESTINATION lib/static/quakelib/ COMPONENT libraries)

# Go into the python subdirectory
ADD_SUBDIRECTORY(python)

# If we have Python, run a set of tests with Python based scripts
IF (PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND AND SWIG_FOUND)
    ADD_TEST(NAME CondUnitTest COMMAND ${PYTHON_EXECUTABLE} ${QUAKELIB_TEST_DIR}/CondUnitTest.py)
    SET_PROPERTY(TEST CondUnitTest PROPERTY ENVIRONMENT "PYTHONPATH=${QUAKELIB_BINARY_DIR}/python/")
    ADD_TEST(NAME FricUnitTest COMMAND ${PYTHON_EXECUTABLE} ${QUAKELIB_TEST_DIR}/FricUnitTest.py)
    SET_PROPERTY(TEST FricUnitTest PROPERTY ENVIRONMENT "PYTHONPATH=${QUAKELIB_BINARY_DIR}/python/")
    ADD_TEST(NAME GreenUnitTest COMMAND ${PYTHON_EXECUTABLE} ${QUAKELIB_TEST_DIR}/GreenUnitTest.py)
    SET_PROPERTY(TEST GreenUnitTest PROPERTY ENVIRONMENT "PYTHONPATH=${QUAKELIB_BINARY_DIR}/python/")
    ADD_TEST(NAME OctreeTest COMMAND ${PYTHON_EXECUTABLE} ${QUAKELIB_TEST_DIR}/OctreeTest.py)
    SET_PROPERTY(TEST OctreeTest PROPERTY ENVIRONMENT "PYTHONPATH=${QUAKELIB_BINARY_DIR}/python/")
    ADD_TEST(NAME UtilUnitTest COMMAND ${PYTHON_EXECUTABLE} ${QUAKELIB_TEST_DIR}/UtilUnitTest.py)
    SET_PROPERTY(TEST UtilUnitTest PROPERTY ENVIRONMENT "PYTHONPATH=${QUAKELIB_BINARY_DIR}/python/")
    ADD_TEST(NAME EventUnitTest COMMAND ${PYTHON_EXECUTABLE} ${QUAKELIB_TEST_DIR}/EventUnitTest.py)
    SET_PROPERTY(TEST EventUnitTest PROPERTY ENVIRONMENT "PYTHONPATH=${QUAKELIB_BINARY_DIR}/python/")
    ADD_TEST(NAME GeomUnitTest COMMAND ${PYTHON_EXECUTABLE} ${QUAKELIB_TEST_DIR}/GeomUnitTest.py)
    SET_PROPERTY(TEST GeomUnitTest PROPERTY ENVIRONMENT "PYTHONPATH=${QUAKELIB_BINARY_DIR}/python/")
    ADD_TEST(NAME MetadataUnitTest COMMAND ${PYTHON_EXECUTABLE} ${QUAKELIB_TEST_DIR}/MetadataUnitTest.py)
    SET_PROPERTY(TEST MetadataUnitTest PROPERTY ENVIRONMENT "PYTHONPATH=${QUAKELIB_BINARY_DIR}/python/")
    ADD_TEST(NAME RectBoundTest COMMAND ${PYTHON_EXECUTABLE} ${QUAKELIB_TEST_DIR}/RectBoundTest.py)
    SET_PROPERTY(TEST RectBoundTest PROPERTY ENVIRONMENT "PYTHONPATH=${QUAKELIB_BINARY_DIR}/python/")
ENDIF(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND AND SWIG_FOUND)
